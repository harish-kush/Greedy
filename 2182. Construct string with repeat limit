class Solution {
public:
    typedef pair<char, int> pi;
    string repeatLimitedString(string s, int repeatLimit) {
        unordered_map<char, int> mp;
        priority_queue<pi> pq;
        for (auto x : s) {
            mp[x]++;
        }
        for (auto x : mp) {
            pq.push({x.first, x.second});
        }

        string result = "";
        while (!pq.empty()) {
            auto largest = pq.top();
            pq.pop();

            int len = min(largest.second, repeatLimit);
            for (int i = 0; i < len; i++) {
                result += largest.first;
            }

            largest.second -= len;

            if (largest.second > 0) {
              
                if (!pq.empty()) {
                    auto secondLargest = pq.top();
                    pq.pop();

                    result += secondLargest.first;
                    secondLargest.second--;

                    if (secondLargest.second > 0) {
                        pq.push({secondLargest.first, secondLargest.second});
                    }
                    pq.push({largest.first, largest.second});
                } else {
                   
                    return result;
                }
            }
        }

        return result;
    }
};
