bool static cmp(pair<int,int>p1,pair<int,int>p2){
        double v1 = (double)p1.first/p1.second;
        double v2 = (double)p2.first/p2.second;
        return v1>v2;
    }
    // Function to get the maximum total value in the knapsack.
    double fractionalKnapsack(vector<int>& val, vector<int>& wt, int capacity) {
        // Your code here
        vector<pair<int,int>>ans;
        for(int i=0;i<val.size();i++){
            ans.push_back({val[i],wt[i]});
        }
        // sort on basis of val/weight ratio
        sort(ans.begin(),ans.end(),cmp);
        
        double totalValue = 0.0; 

         for (int i = 0; i < ans.size(); i++) {
        if (capacity >= ans[i].second) {
            // Take the whole item
            totalValue += ans[i].first;
            capacity -= ans[i].second;
        } else {
            // Take a fraction of the item
            double fraction = (double)capacity / ans[i].second;
            totalValue += ans[i].first * fraction;
            break; // Knapsack is full
        }
    }

   
    totalValue = round(totalValue * 1e6) / 1e6;
    return totalValue;
