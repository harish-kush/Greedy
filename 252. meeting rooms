/**
 * Definition of Interval:
 * class Interval {
 * public:
 *     int start, end;
 *     Interval(int start, int end) {
 *         this->start = start;
 *         this->end = end;
 *     }
 * }
 */

class Solution {
public:
    /**
     * @param intervals: an array of meeting time intervals
     * @return: if a person could attend all meetings
     */
    bool canAttendMeetings(vector<Interval> &intervals) {
         if(intervals.size()==0) return true;
          vector<int>starting, ending;
        for(auto ele:intervals){
            starting.push_back(ele.start);
            ending.push_back(ele.end);
        }
        sort(starting.begin(),starting.end());
        sort(ending.begin(),ending.end());
        int i = 0;
        int j = 0;
        int ans = 0;
        int rooms = 0;
        while(i<starting.size() and j<ending.size()){
            if(starting[i]<ending[j]){
                rooms++;
                ans = max(ans,rooms);
                i++;
            }
            else if(starting[i]==ending[j]) {
                i++;
                j++;
            }
            else{
                rooms--;
                j++;
            }
        }
        if(ans==1) return true;
        else return false;
    }
};
